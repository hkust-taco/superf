check "\\x y -> y"
check "choose id"
check "choose nil ids"
check "\\x -> x x"
check "id auto"
check "id auto_"
check "choose id auto"
check "choose id auto_"
check "f (choose id) ids"
check "poly id"
check "poly (\\x -> x)"
check "id poly (\\x -> x)"
"========================================"
check "\\f -> (f 1, f True)"
check "\\xs -> poly (head xs)"
"========================================"
check "length ids"
check "tail ids"
check "head ids"
check "single id"
check "cons id ids"
check "cons (\\x -> x) ids"
check "append (single inc) (single id)"
check "g (single id) ids"
check "map poly (single id)"
check "map head (single ids)"
"========================================"
check "app poly id"
check "revapp id poly"
check "runST argST"
check "app runST argST"
check "revapp argST runST"
"========================================"
check "k h l"
check "k (\\x -> h x) l"
check "r (\\x y -> y)"
"========================================"
check "auto id"
check "cons (head ids) ids"
check "head ids 3"
check "choose (head ids)"
check "let f = revapp id in f poly"
check "choose id (\\x -> auto_ x)"
"========================================"
check "let z = \\f x -> x in z :: forall a. (a -> a) -> (a -> a)"
check "let s = \\n f x -> f (n f x) in s"
check "let s = \\n f x -> f (n f x) in s :: (forall a. (a -> a) -> (a -> a)) -> (forall a. (a -> a) -> (a -> a))"
check "let z = \\f x -> x; s = \\n f x -> f (n f x); n3 = s (s (s z)) in n3 :: forall a. (a -> a) -> (a -> a)"
check "let z = \\f x -> x; s = \\n f x -> f (n f x); n3 = s (s (s z)) in (\\(x :: Unit) -> n3 n3) :: Unit -> (forall a. (a -> a) -> (a -> a))"
check "let z = \\f x -> x; s = \\n f x -> f (n f x); n3 = s (s (s z)) in fst (fst (fst (n3 (\\x -> (x, 0)) 1)))"
check "(succ (succ zero)) (succ (succ zero))"
check "let z = \\f x -> x; s = \\n f x -> f (n f x) in (s (s z)) (s (s z))"
check "let z = \\f x -> x; s = \\n f x -> f (n f x); to_church = fix (\\f n -> if eq n 0 then z else s (f (sub n 1))) in to_church"
check "let z = \\f x -> x; s = \\n f x -> f (n f x); to_church = fix (\\f n -> if eq n 0 then z else s (f (sub n 1))) in to_church :: Int -> (forall a. (a -> a) -> (a -> a))"
check "fix (\\f x -> if True then x else f f x)"
check "let i = fix (\\f x -> if True then x else f f x) in i i"
check "auto auto"
check "(\\x -> x x) (\\x -> x x)"
check "auto (auto_ id)"
"========================================"
check "(\\y -> let tmp = y id in y const) (\\x -> x x)"
check "(\\k -> (k (\\x -> x), k (\\x -> single x))) (\\f -> (f 1, f True))"
check "(\\f -> let a (x :: Unit) = f id in (a unit :: Int -> (forall b. b -> b))) (const (const id))"

