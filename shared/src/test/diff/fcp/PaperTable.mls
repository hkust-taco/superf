:NoRecursiveTypes
:NoJS



// ============ Definitions for the types used in the examples ============

datatype List[A] = Cons(A, List[A]) | Nil
//│ Defined class List[+A]
//│ Declared List.Cons: List['A] -> ('A, List['A],)
//│ Declared List.Nil: List[?] -> anything
//│ Defined class Cons[+A]
//│ Defined class Nil[+A]
//│ Cons: ('a, List['a],) -> List['a]
//│ Nil: List[nothing]

// MkST is a dummy constructor that gives us the correct variance for ST
datatype ST[S, A] = MkST(S -> (A, S))
//│ Defined class ST[=S, +A]
//│ Declared ST.MkST: ST['S, 'A] -> ('S -> ('A, 'S,),)
//│ Defined class MkST[=S, +A]
//│ MkST: ('a -> ('b, 'a,)) -> ST['a, 'b]


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = match l with Cons(h, t) -> h
//│ head: List['a] -> 'a
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a

def tail: List['a] -> List['a]
def tail l = match l with Cons(h, t) -> t
//│ tail: List['a] -> List['a]
//│ List['A] -> List['A]
//│   <:  tail:
//│ List['a] -> List['a]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil
//│ nil: List[nothing]
//│ List[nothing]
//│   <:  nil:
//│ List[nothing]

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons(head, tail)
//│ cons: 'a -> List['a] -> List['a]
//│ 'a -> List['a] -> List['a]
//│   <:  cons:
//│ 'a -> List['a] -> List['a]

def is_empty: List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│ List['a] -> List['a] -> List['a]
//│   <:  append:
//│ List['a] -> List['a] -> List['a]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int

def const: 'a -> 'b -> 'a
def const x y = x
//│ const: 'a -> anything -> 'a
//│ 'a -> anything -> 'a
//│   <:  const:
//│ 'a -> anything -> 'a

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│ int -> int
//│   <:  inc:
//│ int -> int

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│ 'a -> 'a -> 'a
//│   <:  choose:
//│ 'a -> 'a -> 'a

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│ (1 -> 'a & true -> 'b) -> ('a, 'b,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)

def auto' : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto' x = x x
//│ auto': (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto':
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│ ('b -> 'a) -> List['b] -> List['a]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│ 'a -> ('a -> 'b) -> 'b
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b

def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

def argST: ST['s, int]
//│ argST: ST['s, int]

// A9
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a

// C8
def g: List['a] -> List['a] -> 'a
//│ g: List['a] -> List['a] -> 'a

// E1, E2
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E3
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (forall 'b. anything -> 'b -> 'b) -> int


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: forall 'a 'b. Pair['a, 'b] -> 'a
def fst((x, y)) = x
//│ fst: Pair['a, ?] -> 'a
//│ ('a, anything,) -> 'a
//│   <:  fst:
//│ Pair['a, ?] -> 'a

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│ anything -> 'a -> 'a
//│   <:  zero:
//│ ChurchInt

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ (n: ChurchInt) f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ChurchInt -> ('N -> ('N & 'a)) -> 'N -> 'a
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)



// ===============================================================
// ========================== SuperF -D ==========================
// ===============================================================

// SuperF without distributivity

:DontDistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)

// A6
id auto'
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)

// A8
choose id auto'
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)

// A9
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)

// A11
poly (fun x -> x)
//│ res: (int, bool,)

// A12
id poly (fun x -> x)
//│ res: (int, bool,)


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]

// C3
head ids
//│ res: 'a -> 'a

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]

// C7
append (single inc) (single id)
//│ res: List[int -> int]

// C8
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)

// D2
revapp id poly
//│ res: (int, bool,)

// D3
runST argST
//│ res: int

// D4
app runST argST
//│ res: int

// D5
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]

// F7
(head ids) 3
//│ res: 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)

// F9
let f = revapp id in f poly
//│ res: (int, bool,)

// F10
choose id (fun x -> auto' x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'b -> 'c & 'c -> 'd) -> 'a -> 'd

// G1A
z: ChurchInt
//│ res: ChurchInt

:e
// G2A
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.422: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.194: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.194: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.409: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.422: 	s: ChurchInt -> ChurchInt
//│ ╙──       	^
//│ res: ChurchInt -> ChurchInt

// G3A
n3: ChurchInt
//│ res: ChurchInt

:e
// G4A
(fun () -> n3 n3) : () -> ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.447: 	(fun () -> n3 n3) : () -> ChurchInt
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.194: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.194: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.409: 	def s n f x = f (n f x)
//│ ║         	          ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.447: 	(fun () -> n3 n3) : () -> ChurchInt
//│ ║         	           ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.409: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: () -> ChurchInt

// G5
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1

// G6
(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M

// G7
(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b) & 'b -> ('a & 'b & 'c)) -> 'a -> 'c

// G8
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'c. ('b & 'c) -> ('c | 'a)))

:e
// G8A
to_ch: int -> ChurchInt
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.487: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── type variable `'N` leaks out of its scope
//│ ║  l.194: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                                   ^^
//│ ╟── back into type variable `'N`
//│ ║  l.194: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                             ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.409: 	def s n f x = f (n f x)
//│ ║         	        ^^^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.482: 	rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ ║         	                                        ^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.487: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.409: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: int -> ChurchInt

:e
// G9
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> 'c
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c :> 'b -> 'c
//│        <: 'a
//│ ║  l.514: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──       	                                    ^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.514: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b

:e
// G9'
id1 id1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'd -> 'a
//│     'd :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'a & 'e & 'f
//│     'f :> ('d & 'f) -> ('a | 'g)
//│        <: 'd & 'g
//│     'g :> ('d & 'f) -> ('a | 'g)
//│        <: 'f -> 'g
//│     'e :> ('d & 'e) -> ('a | 'h)
//│        <: 'd & 'h
//│     'h :> ('d & 'e) -> ('a | 'h)
//│        <: 'e -> 'h
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c := 'b -> 'c
//│ ║  l.514: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.538: 	id1 id1
//│ ║         	^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error

:e
// G10
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.566: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error

:e
// G10' – using forced instantiation with `!`
(fun x -> x x) (fun x -> x x)!
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> 'a -> 'b
//│        <: 'a -> (? & 'b)
//│ ╙──
//│ res: nothing

:e
// G11
auto (auto' id)
//│ ╔══[ERROR] Type error in application
//│ ║  l.585: 	auto (auto' id)
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type variable `'a` leaks out of its scope
//│ ║  l.130: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                       ^^
//│ ╟── back into type variable `'a`
//│ ║  l.130: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                             ^^
//│ res: 'b -> 'b | error

// G12
(fun y -> (let tmp = y id in y const)) (fun x -> x x)
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)

// G13
(fun k -> (k (fun x -> x), k (fun x -> single x))) (fun f -> (f 1, f true))
//│ res: ((1, true,), (List[1], List[true],),)

// G14
(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ res: int -> (forall 'b. 'b -> 'b)



// ===============================================================
// ========================== SuperF +D ==========================
// ===============================================================

// SuperF (with distributivity)

:DistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)

// A6
id auto'
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)

// A8
choose id auto'
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)

// A9
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)

// A11
poly (fun x -> x)
//│ res: (int, bool,)

// A12
id poly (fun x -> x)
//│ res: (int, bool,)


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]

// C3
head ids
//│ res: 'a -> 'a

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]

// C7
append (single inc) (single id)
//│ res: List[int -> int]

// C8
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)

// D2
revapp id poly
//│ res: (int, bool,)

// D3
runST argST
//│ res: int

// D4
app runST argST
//│ res: int

// D5
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
k h lst
//│ res: int -> 'a -> 'a

// E2
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]

// F7
(head ids) 3
//│ res: 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)

// F9
let f = revapp id in f poly
//│ res: (int, bool,)

// F10
choose id (fun x -> auto' x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b

// G1A
z: ChurchInt
//│ res: ChurchInt

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt

// G3A
n3: ChurchInt
//│ res: ChurchInt

// G4A
(fun () -> n3 n3) : () -> ChurchInt
//│ res: () -> ChurchInt

// G5
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1

// G6
(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M

// G7
(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b

// G8
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b

// G8A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt

:e
// G9
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a <: 'b -> 'c
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c :> 'b -> 'c
//│        <: 'a
//│ ║  l.842: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──       	                                    ^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.842: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b

:e
// G9'
id1 id1
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'd -> 'a
//│     'd :> forall 'b 'c. ('d & 'b) -> ('a | 'c)
//│        <: 'a & 'e & 'f
//│     'f :> ('d & 'f) -> ('a | 'g)
//│        <: 'd & 'g
//│     'g :> ('d & 'f) -> ('a | 'g)
//│        <: 'f -> 'g
//│     'e :> ('d & 'e) -> ('a | 'h)
//│        <: 'd & 'h
//│     'h :> ('d & 'e) -> ('a | 'h)
//│        <: 'e -> 'h
//│     'b :> 'b -> 'c
//│        <: 'c
//│     'c := 'b -> 'c
//│ ║  l.842: 	rec def id1 x = if true then x else id1 id1 x
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.866: 	id1 id1
//│ ║         	^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error

:e
// G10
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.894: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error

:e
// G10' – using forced instantiation with `!`
(fun x -> x x) (fun x -> x x)!
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> 'a -> 'b
//│        <: 'a -> (? & 'b)
//│ ╙──
//│ res: nothing

// G11
auto (auto' id)
//│ res: 'b -> 'b

// G12
(fun y -> (let tmp = y id in y const)) (fun x -> x x)
//│ res: anything -> 'a -> anything -> 'a

// G13
(fun k -> (k (fun x -> x), k (fun x -> single x))) (fun f -> (f 1, f true))
//│ res: ((1, true,), (List[1], List[true],),)

:e // The only example in this file where distributivity makes things worse
// G14
(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ╔══[ERROR] Type error in application
//│ ║  l.925: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.925: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║         	                                                     ^^
//│ ╟── back into type variable `'b`
//│ ║  l.925: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║         	                                                           ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.925: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║         	                    ^^^^
//│ ╟── • this application:
//│ ║  l.925: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ╙──       	                            ^^^
//│ res: int -> (forall 'b. 'b -> 'b) | error



// ===============================================================
// ======================== SuperF +D+RT =========================
// ===============================================================

// SuperF with cycle checker, with distributivity, and with recursive types

:RecursiveTypes


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)

// A6
id auto'
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)

// A8
choose id auto'
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)

// A9
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)

// A11
poly (fun x -> x)
//│ res: (int, bool,)

// A12
id poly (fun x -> x)
//│ res: (int, bool,)


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (1 -> 'a & true -> 'b) -> ('a, 'b,)

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]

// C3
head ids
//│ res: 'a -> 'a

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]

// C7
append (single inc) (single id)
//│ res: List[int -> int]

// C8
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)

// D2
revapp id poly
//│ res: (int, bool,)

// D3
runST argST
//│ res: int

// D4
app runST argST
//│ res: int

// D5
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
k h lst
//│ res: int -> 'a -> 'a

// E2
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]

// F7
(head ids) 3
//│ res: 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)

// F9
let f = revapp id in f poly
//│ res: (int, bool,)

// F10
choose id (fun x -> auto' x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b

// G1A
z: ChurchInt
//│ res: ChurchInt

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt

// G3A
n3: ChurchInt
//│ res: ChurchInt

// G4A
(fun () -> n3 n3) : () -> ChurchInt
//│ res: () -> ChurchInt

// G5
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1

// G6
(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M

// G7
(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b

// G8
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> ('a & 'b)) -> ('a & 'b) -> 'b

// G8A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt

// G9
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b

// G9'
id1 id1
//│ res: 'a -> 'b | 'id1
//│   where
//│     'a :> forall 'id1 'c 'd. 'a -> 'b | 'id1
//│        <: 'b
//│     'b :> forall 'id1 'c 'd. 'id1
//│        <: 'a -> 'b
//│     'id1 :> 'c -> 'd
//│     'c :> 'id1
//│        <: 'd
//│     'd :> 'id1
//│        <: 'c -> 'd

:e
// G10
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1201: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: error

// G10' – using forced instantiation with `!`
(fun x -> x x) (fun x -> x x)!
//│ res: nothing

// G11
auto (auto' id)
//│ res: 'b -> 'b

// G12
(fun y -> (let tmp = y id in y const)) (fun x -> x x)
//│ res: anything -> 'a -> anything -> 'a

// G13
(fun k -> (k (fun x -> x), k (fun x -> single x))) (fun f -> (f 1, f true))
//│ res: ((1, true,), (List[1], List[true],),)

:e
// G14
(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ╔══[ERROR] Type error in application
//│ ║  l.1226: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.1226: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║          	                                                     ^^
//│ ╟── back into type variable `'b`
//│ ║  l.1226: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║          	                                                           ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this application:
//│ ║  l.1226: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ║          	                    ^^^^
//│ ╟── • this application:
//│ ║  l.1226: 	(fun f -> let a() = f id in a() : int -> (forall 'b. 'b -> 'b)) (const (const id))
//│ ╙──        	                            ^^^
//│ res: int -> (forall 'b. 'b -> 'b) | error


