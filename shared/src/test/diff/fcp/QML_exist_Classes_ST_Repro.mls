// * TODO minimize this test


:NoRecursiveTypes
:NoConstrainedTypes


class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]


def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: ArraysRep[in 'A | 'A0 | 'A1 | 'A2 & 'A3 out 'A0 & 'A2, in 'Rep | 'Rep0 out nothing] -> (ArraysImpl['A3, 'Rep1] with {fold: forall 'b. ('A2 -> 'b -> 'b) -> 'b -> ('Rep0, anything,) -> 'b, init: 'A -> (nothing, "initialized",), sub: ('Rep, anything,) -> int -> 'A0, update: forall 'a. ('Rep2 & 'a, anything,) -> int -> 'A1 -> ('a, "updated",)})
//│   where
//│     'Rep1 :> (nothing, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A3 :> 'A0
//│         <: nothing
//│               = [Function: simpleStepImpl]


:e
// * Something off is going on here (see stats)
:stats
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?A ?Rep ?A0 ?A1 ?a ?b ?Rep0 ?A2 ?Rep1 ?Rep2 ?fold ?Rep3 ?c ?Rep4 ?d ?A3 ?Rep5 ?e ?Rep6 ?Rep7 ?A4 ?A5 ?Rep8 ?Rep9 ?A6 ?f ?g ?h ?Rep10 ?i ?init ?sub ?j ?A7 ?k ?update ?A8 ?A9. ?i -> ?f <: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]` took too many steps and ran out of fuel (10000)
//│ ║  l.57: 	simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ ║        	^^^^^^^^^^^^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│   where
//│     'a :> error
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 10249
//│ annoying  calls  : 76
//│ subtyping calls  : 71126
// :ResetFuel

// * Note that the above incidentally can be checked using recursive types
:RecursiveTypes
:stats
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 579
//│ annoying  calls  : 101
//│ subtyping calls  : 5641
:NoRecursiveTypes


def arr: Arrays[int]
//│ arr: Arrays[int]
//│    = <missing implementation>

// def stepped = arr simpleStepImpl

def mkArrays: ArraysImpl['a, 'r] -> Arrays['a]
mkArrays impl k = k impl
//│ mkArrays: ArraysImpl['a, 'r] -> Arrays['a]
//│         = <missing implementation>
//│ 'a -> ('a -> 'b) -> 'b
//│   <:  mkArrays:
//│ ArraysImpl['a, 'r] -> Arrays['a]
//│         = [Function: mkArrays]

// * Inconsistent bounds on 'Rep after type avoidance during extrusion
:e
def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ╔══[ERROR] Type error in application
//│ ║  l.100: 	def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'Rep` leaks out of its scope
//│ ║  l.35: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                                            ^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.100: 	def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ║         	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.100: 	def stepped = arr (fun arrImpl -> fun k -> k (simpleStepImpl arrImpl))
//│ ║         	              ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.41: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ╙──      	                                                    ^^
//│ stepped: error
//│        = <no result>
//│          arr is not implemented


